services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"  # HTTPS port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro  # SSL certificates
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro  # Basic auth passwords
    depends_on:
      app:
        condition: service_healthy
      grafana:
        condition: service_started
      prometheus:
        condition: service_started
      pgadmin:
        condition: service_started
      redis-commander:
        condition: service_started
    networks:
      - logging_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "8000"  # Application port
      - "9090"  # Metrics port
      - "5678"  # Debugger port
    volumes:
      - .:/app
      - ./logs:/var/log/logging_service
    env_file:
      - .env.development
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app
      - WATCHFILES_FORCE_POLLING=true  # Enable file watching in Docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - logging_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-logging_db}
      POSTGRES_USER: ${DB_USER:-logger}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-development_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - logging_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-logger} -d ${DB_NAME:-logging_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - logging_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    expose:
      - "8081"
    networks:
      - logging_network
    depends_on:
      - redis
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    expose:
      - "9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - logging_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_AUTH_PROXY_ENABLED=false
    expose:
      - "3000"
    depends_on:
      - prometheus
      - loki
    networks:
      - logging_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    expose:
      - "80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - logging_network
    depends_on:
      - postgres
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    networks:
      - logging_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:3100/ready"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/var/log/logging_service
    networks:
      - logging_network
    depends_on:
      - loki
    restart: unless-stopped

networks:
  logging_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:
  loki_data:
  logs: 